openapi: 3.0.0
info: 
  title: "Graph Explorer API" 
  version: "1.0.0" 
servers:
  - url: https://graphexplorerapi.azurewebsites.net/
  - url: https://localhost:44399/
  - url: https://localhost:5001/
  
paths:
  /snippetgenerator:
    post:
      tags:
        - snippets
      description: Obtains a language code snippet from an example HttpRequestMessage sent out to the graph endpoint
      parameters:
      - name: lang
        in: query
        schema:
          type: string
          enum:
            - C#
            - Javascript
            - Java
            - Objective-C
          default: C#
      requestBody:
        description: HTTP request message to be translated into code.
        content:
          'text/message;version=1.1;msgtype=request':  
            schema:
              type: string
            examples: 
              GetUserProfile:
                value: |
                    GET /v1.0/users/joe@tenant.com HTTP/1.1 
                    Host: https://graph.microsoft.com  
                    Accept: application/json
              SendMail:
                value: |  
                  POST /v1.0/me/sendMail 
                  Host: https://graph.microsoft.com 
                  Content-type: application/json
                  {
                    "message": {
                      "subject": "Meet for lunch?",
                      "body": {
                        "contentType": "Text",
                        "content": "The new cafeteria is open."
                      },
                      "toRecipients": [
                        {
                          "emailAddress": {
                            "address": "fannyd@contoso.onmicrosoft.com"
                          }
                        }
                      ],
                      "ccRecipients": [
                        {
                          "emailAddress": {
                            "address": "danas@contoso.onmicrosoft.com"
                          }
                        }
                      ]
                    },
                    "saveToSentItems": "false"
                  }
      responses:
        200:
         description: Generated language snippet  
         content: 
           "text/plain":  
              examples: 
                "C# GetUserProfile": 
                  value: | 
                    var user = await client.Me.Request().GetAsync();
        400:
          description: Bad request
  /samples:
    get:
      tags:
        - samples
      description: Get all sample queries or filter by category, humanName or tip. 
      parameters:
        - name: search   # /samples?search=user
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            'application/json': 
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/sample'
        204:
          description: No content
        404:
          description: Not found
        500:
          description: Internal server error
    post:
      tags:
        - samples
      description: Create a new sample.
      security:
        - OAuth2Implicit: [api://graphexplorerapi/Samples.ReadWrite]
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/sample'
            example:
              {
                "category": "Security",
                "method": "GET",
                "humanName": "alerts filter by destination address",
                "requestUrl": "/v1.0/security/alerts?$filter=networkConnections/any(d:d/destinationAddress eq '{destination-address}')",
                "docLink": "https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/alert_list",
                "tip": "This query requires a destination address. Run https://graph.microsoft.com/v1.0/security/alerts?$top=1 and search the results for a destinationAddress property.",
                "skipTest": false
              }
      responses:
        201: 
          description: Returns created sample with provisioned Id value.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/sample'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error
  /samples/{id}:
    get:
      tags:
        - samples
      description: Get a specific sample query by its Id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/sample'
        204:
          description: No content
        404:
          description: Not found
        500:
          description: Internal server error
    put:
      tags:
        - samples
      description: Update a specific sample query by its Id.
      security:
        - OAuth2Implicit: [api://graphexplorerapi/Samples.ReadWrite]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/sample'
            example:
              {
                "category": "Security",
                "method": "GET",
                "humanName": "alerts filter by destination address",
                "requestUrl": "/v1.0/security/alerts?$filter=networkConnections/any(d:d/destinationAddress eq '{destination-address}')",
                "docLink": "https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/alert_list",
                "tip": "This query requires a destination address. Run https://graph.microsoft.com/v1.0/security/alerts?$top=1 and search the results for a destinationAddress property.",
                "skipTest": false
              }
      responses:
        200:
          description: Ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/sample'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - samples
      description: Delete a specific sample query by its Id.
      security:
        - OAuth2Implicit: [api://graphexplorerapi/Samples.ReadWrite]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
  /permissions:  #  GET /permissions?requesturl=/me/memberof&method=GET&scopetype=DelegatedWork
    get:
      tags:
        - permissions
      description: Gets ordered array of permissions that enable access to a specified resource, from least to most privileged along with detailed information about the permissions.
      parameters:
        - name: requestUrl
          in: query
          required: true
          schema:
            type: string
        - name: method
          in: query
          required: true
          schema:
            type: string
            enum:
              - GET
              - PUT
              - POST
              - PATCH
              - DELETE
        - name: scopeType
          in: query
          required: true
          schema:
            type: string
            enum:
              - DelegatedWork
              - DelegatedPersonal
              - Application
      responses:
        200:
          description: Ordered array of permissions that enable access to a specified resource, from least to most privileged along with detailed information about the permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission'
              example: [
                { 
                  "value":"Directory.Read.All", 
                  "consentDisplayName":"Read directory data", 
                  "consentDescription":"Allows the app to read data in your organization's directory.", 
                  "isAdmin":true 
                }, 
                { 
                  "value":"Directory.ReadWrite.All", 
                  "consentDisplayName":"Read and write directory data", 
                  "consentDescription":"Allows the app to read and write data in your organization's directory, such as other users, groups. It does not allow the app to delete users or groups, or reset user passwords.",
                  "isAdmin":true
                },
                {
                  "value":"Directory.AccessAsUser.All",
                  "consentDisplayName":"Access the directory as you",
                  "consentDescription":"Allows the app to have the same access to information in your work or school directory as you do.", 
                  "isAdmin":true 
                }
              ]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error
  /samplesadmin:
    get:
      tags:
        - admin
      description: Gets all category policies or filter by userPrincipalName or categoryName.
      parameters:
        - name: userPrincipalName
          in: query
          required: false
          schema:
            type: string
        - name: categoryName
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of sample queries category policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categoryPolicy'
              example: 
                {
                  "CategoryPolicies": [
                    {
                      "categoryName": "Getting Started",
                      "userClaims": [
                        {
                          "userName": "john doe",
                          "userPrincipalName": "john.doe@microsoft.com",
                          "userPermissions": [
                            {
                              "name": "POST",
                              "value": true
                            },
                            {
                              "name": "PUT",
                              "value": true
                            },
                            {
                              "name": "DELETE",
                              "value": false
                            }
                          ]
                        },
                        {
                          "userName": "jane doe",
                          "userPrincipalName": "jane.doe@microsoft.com",
                          "userPermissions": [
                            {
                              "name": "POST",
                              "value": true
                            },
                            {
                              "name": "PUT",
                              "value": true
                            },
                            {
                              "name": "DELETE",
                              "value": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
                
        404:
          description: Not found
        500:
          description: Internal server error
    post:
      tags:
        - admin
      description: Adds a new user claim to a category policy.
      security:
        - OAuth2Implicit: [api://graphexplorerapi/Samples.ReadWrite]
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/categoryPolicy'
            example:
              {
                "categoryName": "Getting Started",
                "userClaims": [
                  {
                    "userName": "john doe",
                    "userPrincipalName": "john.doe@microsoft.com",
                    "userPermissions": [
                      {
                        "name": "POST",
                        "value": true
                      },
                      {
                        "name": "PUT",
                        "value": true
                      },
                      {
                        "name": "DELETE",
                        "value": true
                      }
                    ]
                  }
                ]
              }
      responses:
        201:
          description: Returns an array of all the user claims along with the newly created claim in the category policy.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/categoryPolicy'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error
    put:
      tags:
        - admin
      description: Updates a user claim in a category policy.
      security:
        - OAuth2Implicit: [api://graphexplorerapi/Samples.ReadWrite]
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/categoryPolicy'
            example: 
              {
                "categoryName": "Getting Started",
                "userClaims": [
                  {
                    "userName": "john doe",
                    "userPrincipalName": "john.doe@microsoft.com",
                    "userPermissions": [
                      {
                        "name": "POST",
                        "value": true
                      },
                      {
                        "name": "PUT",
                        "value": true
                      },
                      {
                        "name": "DELETE",
                        "value": false
                      }
                    ]
                  }
                ]
              }
      responses:
        200:
          description: Ok
          content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/categoryPolicy'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - admin
      description: Deletes a user claim in a category policy.
      security:
        - OAuth2Implicit: [api://graphexplorerapi/Samples.ReadWrite]
      parameters:
        - name: userPrincipalName
          in: query
          required: true
          schema:
            type: string
        - name: categoryName
          in: query
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
components:
  schemas:
    sample:
      type: object
      required:
        - category
        - method
        - humanName
        - requestUrl
      properties:
        id:
          type: string
        category:
          type: string
        method:
          type: string
          enum:
            - GET
            - PUT
            - POST
            - DELETE
            - PATCH
        humanName:
          type: string
        requestUrl:
          type: string
        docLink:
          type: string
        tip:
          type: string
        skipTest: 
          type: boolean
        postBody:
          type: string
        headers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
    categoryPolicy:
      type: object
      properties:
        categoryName:
          type: string
        userClaims:
          type: array
          items:
            type: object
            properties:
              userName:
                type: string
              userPrincipalName:
                type: string
              userPermissions:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: boolean
    permission:
      type: object
      properties:
        adminConsentDescription:
          type: string
        adminConsentDisplayName:
          type: string
        id:
          type: string
        isEnabled:
          type: string
        isAdmin:
          type: string
        consentDescription:
          type: string
        consentDisplayName:
          type: string
        value:
          type: string
  securitySchemes:
    OAuth2Implicit:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow to authenticate with Azure AD.
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
          scopes: 
            api://graphexplorerapi/Samples.ReadWrite: writes, updates and deletes workload samples.